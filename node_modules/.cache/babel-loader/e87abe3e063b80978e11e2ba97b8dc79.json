{"ast":null,"code":"var _jsxFileName = \"D:\\\\MarvelApp-main\\\\MarvelApp-main2\\\\src\\\\Components\\\\Marvel.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Apiservice from \"../ApiService/Apiservice\"; // Adjust the import path if necessary\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Marvel = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [item, setItem] = useState(null);\n  const [loading, setLoading] = useState(true); // Add loading state\n\n  const [error, setError] = useState(null); // Add error state\n\n  const fetchCharacter = async () => {\n    try {\n      setLoading(true); // Start loading\n\n      const response = await Apiservice.GetCharacterById(id);\n      console.log(\"API marvel data Response:\", response); // Log the entire response\n\n      if (response.status === 200) {\n        setItem(response.data.data.results[0]);\n      } else {\n        throw new Error(`API responded with status ${response.status}`);\n      }\n    } catch (error) {\n      console.error(\"Error fetching character details:\", error);\n      setError(`Failed to load character details: ${error.message}`);\n    } finally {\n      setLoading(false); // Stop loading\n    }\n  };\n\n  useEffect(() => {\n    fetchCharacter();\n  }, [id]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"BeforeLoading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, this); // Loading indicator\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"Error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this); // Error message\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !item ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"NotFound\",\n      children: \"Character not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-box\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `${item.thumbnail.path}.${item.thumbnail.extension}`,\n          alt: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: item.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Marvel, \"1nK/ZBsdgFLa/dEVUW8fU2tR7wo=\", false, function () {\n  return [useParams];\n});\n\n_c = Marvel;\n\nvar _c;\n\n$RefreshReg$(_c, \"Marvel\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Apiservice","Marvel","id","item","setItem","loading","setLoading","error","setError","fetchCharacter","response","GetCharacterById","console","log","status","data","results","Error","message","thumbnail","path","extension","name","description"],"sources":["D:/MarvelApp-main/MarvelApp-main2/src/Components/Marvel.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Apiservice from \"../ApiService/Apiservice\"; // Adjust the import path if necessary\n\nexport const Marvel = () => {\n  const { id } = useParams();\n  const [item, setItem] = useState(null);\n  const [loading, setLoading] = useState(true); // Add loading state\n  const [error, setError] = useState(null); // Add error state\n\n  const fetchCharacter = async () => {\n    try {\n      setLoading(true); // Start loading\n      const response = await Apiservice.GetCharacterById(id);\n      console.log(\"API marvel data Response:\", response); // Log the entire response\n      if (response.status === 200) {\n        setItem(response.data.data.results[0]);\n      } else {\n        throw new Error(`API responded with status ${response.status}`);\n      }\n    } catch (error) {\n      console.error(\"Error fetching character details:\", error);\n      setError(`Failed to load character details: ${error.message}`);\n    } finally {\n      setLoading(false); // Stop loading\n    }\n  };\n\n  useEffect(() => {\n    fetchCharacter();\n  }, [id]);\n\n  if (loading) {\n    return <p className=\"BeforeLoading\">Loading...</p>; // Loading indicator\n  }\n\n  if (error) {\n    return <p className=\"Error\">{error}</p>; // Error message\n  }\n\n  return (\n    <>\n      {!item ? (\n        <p className=\"NotFound\">Character not found</p>\n      ) : (\n        <div className=\"box-content\">\n          <div className=\"right-box\">\n            <img\n              src={`${item.thumbnail.path}.${item.thumbnail.extension}`}\n              alt={item.name}\n            />\n          </div>\n          <div className=\"left-box\">\n            <h1>{item.name}</h1>\n            <h4>{item.description}</h4>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,UAAP,MAAuB,0BAAvB,C,CAAmD;;;;AAEnD,OAAO,MAAMC,MAAM,GAAG,MAAM;EAAA;;EAC1B,MAAM;IAAEC;EAAF,IAASH,SAAS,EAAxB;EACA,MAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC,CAH0B,CAGoB;;EAC9C,MAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC,CAJ0B,CAIgB;;EAE1C,MAAMW,cAAc,GAAG,YAAY;IACjC,IAAI;MACFH,UAAU,CAAC,IAAD,CAAV,CADE,CACgB;;MAClB,MAAMI,QAAQ,GAAG,MAAMV,UAAU,CAACW,gBAAX,CAA4BT,EAA5B,CAAvB;MACAU,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCH,QAAzC,EAHE,CAGkD;;MACpD,IAAIA,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;QAC3BV,OAAO,CAACM,QAAQ,CAACK,IAAT,CAAcA,IAAd,CAAmBC,OAAnB,CAA2B,CAA3B,CAAD,CAAP;MACD,CAFD,MAEO;QACL,MAAM,IAAIC,KAAJ,CAAW,6BAA4BP,QAAQ,CAACI,MAAO,EAAvD,CAAN;MACD;IACF,CATD,CASE,OAAOP,KAAP,EAAc;MACdK,OAAO,CAACL,KAAR,CAAc,mCAAd,EAAmDA,KAAnD;MACAC,QAAQ,CAAE,qCAAoCD,KAAK,CAACW,OAAQ,EAApD,CAAR;IACD,CAZD,SAYU;MACRZ,UAAU,CAAC,KAAD,CAAV,CADQ,CACW;IACpB;EACF,CAhBD;;EAkBAT,SAAS,CAAC,MAAM;IACdY,cAAc;EACf,CAFQ,EAEN,CAACP,EAAD,CAFM,CAAT;;EAIA,IAAIG,OAAJ,EAAa;IACX,oBAAO;MAAG,SAAS,EAAC,eAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP,CADW,CACyC;EACrD;;EAED,IAAIE,KAAJ,EAAW;IACT,oBAAO;MAAG,SAAS,EAAC,OAAb;MAAA,UAAsBA;IAAtB;MAAA;MAAA;MAAA;IAAA,QAAP,CADS,CACgC;EAC1C;;EAED,oBACE;IAAA,UACG,CAACJ,IAAD,gBACC;MAAG,SAAS,EAAC,UAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADD,gBAGC;MAAK,SAAS,EAAC,aAAf;MAAA,wBACE;QAAK,SAAS,EAAC,WAAf;QAAA,uBACE;UACE,GAAG,EAAG,GAAEA,IAAI,CAACgB,SAAL,CAAeC,IAAK,IAAGjB,IAAI,CAACgB,SAAL,CAAeE,SAAU,EAD1D;UAEE,GAAG,EAAElB,IAAI,CAACmB;QAFZ;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QADF,eAOE;QAAK,SAAS,EAAC,UAAf;QAAA,wBACE;UAAA,UAAKnB,IAAI,CAACmB;QAAV;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAA,UAAKnB,IAAI,CAACoB;QAAV;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QAPF;IAAA;MAAA;MAAA;MAAA;IAAA;EAJJ,iBADF;AAoBD,CAxDM;;GAAMtB,M;UACIF,S;;;KADJE,M"},"metadata":{},"sourceType":"module"}